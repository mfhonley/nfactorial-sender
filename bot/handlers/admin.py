from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.database.db import Database
from bot.utils.permissions import is_super_admin

router = Router()

SUPER_ADMIN_ID = 803817300  # –¢–≤–æ–π ID


class AdminStates(StatesGroup):
    deleting_user = State()


@router.message(Command("admin"))
async def admin_panel(message: Message, db: Database):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞)"""
    if not is_super_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    stats = await db.get_user_stats()
    admins = await db.get_all_admins()

    text = f"""
üîê <b>–°–£–ü–ï–† –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨</b>

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}
üì§ –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {stats['total_broadcasts']}
üëë –ê–¥–º–∏–Ω–æ–≤: {len(admins)}
"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")
            ],
            [
                InlineKeyboardButton(text="üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_manage_admins")
            ],
            [
                InlineKeyboardButton(text="üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="admin_messages")
            ],
            [
                InlineKeyboardButton(text="üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_stats")
            ]
        ]
    )

    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery, db: Database):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_super_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    stats = await db.get_user_stats()
    admins = await db.get_all_admins()

    # –î–æ–±–∞–≤–ª—è–µ–º timestamp —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –≤—Å–µ–≥–¥–∞ –±—ã–ª —Ä–∞–∑–Ω—ã–π
    import datetime
    now = datetime.datetime.now().strftime("%H:%M:%S")

    text = f"""
üîê <b>–°–£–ü–ï–† –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨</b>

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}
üì§ –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {stats['total_broadcasts']}
üëë –ê–¥–º–∏–Ω–æ–≤: {len(admins)}

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {now}</i>
"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")
            ],
            [
                InlineKeyboardButton(text="üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_manage_admins")
            ],
            [
                InlineKeyboardButton(text="üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="admin_messages")
            ],
            [
                InlineKeyboardButton(text="üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_stats")
            ]
        ]
    )

    try:
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await callback.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
        await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")


@router.callback_query(F.data == "admin_users")
async def admin_users_list(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_super_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    users = await db.get_all_users()

    text = "üë• <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:</b>\n\n"

    for i, user in enumerate(users[:50], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 50
        display_name = user.get('username') and f"@{user['username']}" or \
                      f"{user.get('first_name', '')} {user.get('last_name', '')}".strip() or \
                      f"–ë–µ–∑ –∏–º–µ–Ω–∏"

        text += f"{i}. {display_name} (ID: {user['user_id']})\n"
        text += f"   ‚îî –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.get('last_activity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"

    if len(users) > 50:
        text += f"\n<i>...–∏ –µ—â–µ {len(users) - 50} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>"

    text += f"\n\n<b>–í—Å–µ–≥–æ:</b> {len(users)}"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_stats")
            ]
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "admin_messages")
async def admin_messages_list(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not is_super_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    messages = await db.get_recent_messages(limit=20)

    if not messages:
        text = "üì≠ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."
    else:
        text = "üí¨ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n\n"

        for i, msg in enumerate(messages, 1):
            sender = msg.get('sender_username') and f"@{msg['sender_username']}" or \
                    msg.get('sender_first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            recipient = msg.get('recipient_username') and f"@{msg['recipient_username']}" or \
                       msg.get('recipient_first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            message_preview = msg.get('message_text', '')[:50]
            if len(msg.get('message_text', '')) > 50:
                message_preview += "..."

            text += f"{i}. {sender} ‚Üí {recipient}\n"
            text += f"   üìù {message_preview}\n"
            text += f"   üïê {msg.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_stats")
            ]
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.message(Command("broadcast_all"))
async def admin_broadcast(message: Message, db: Database):
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞)"""
    if not is_super_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    text = message.text.replace("/broadcast_all", "").strip()

    if not text:
        await message.answer(
            "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "<code>/broadcast_all —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</code>",
            parse_mode="HTML"
        )
        return

    users = await db.get_all_users()

    await message.answer(f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å—Å—ã–ª–∫—É {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")

    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
    await message.answer(
        f"‚úÖ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        f"–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
    )


@router.message(Command("delete_user"))
async def delete_user_command(message: Message, db: Database):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞)"""
    if not is_super_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()

    if len(args) < 2:
        await message.answer(
            "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "<code>/delete_user USER_ID</code>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/delete_user 123456789</code>\n\n"
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ /admin ‚Üí –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            parse_mode="HTML"
        )
        return

    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    user = await db.get_user_by_id(user_id)
    if not user:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è
    if user_id == SUPER_ADMIN_ID:
        await message.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞!")
        return

    display_name = user.get('username') and f"@{user['username']}" or \
                  user.get('first_name') or f"ID: {user_id}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å (soft)", callback_data=f"deactivate_{user_id}"),
            ],
            [
                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞ (hard)", callback_data=f"delete_{user_id}"),
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")
            ]
        ]
    )

    await message.answer(
        f"‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name}\n"
        f"ID: {user_id}\n\n"
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>\n"
        f"‚Ä¢ üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –±–∞–∑–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –¥—Ä—É–≥–∏–º\n"
        f"‚Ä¢ üóë –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞ - –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã —Å–æ –≤—Å–µ–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("deactivate_"))
async def deactivate_user_callback(callback: CallbackQuery, db: Database):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_super_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    user_id = int(callback.data.split("_")[1])

    await db.deactivate_user(user_id)

    await callback.message.edit_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n"
        f"–û–Ω –±–æ–ª—å—à–µ –Ω–µ –≤–∏–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
        parse_mode="HTML"
    )
    await callback.answer("‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")


@router.callback_query(F.data.startswith("delete_"))
async def delete_user_callback(callback: CallbackQuery, db: Database):
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_super_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    user_id = int(callback.data.split("_")[1])

    await db.delete_user(user_id)

    await callback.message.edit_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"
        f"–í—Å–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã.",
        parse_mode="HTML"
    )
    await callback.answer("‚úÖ –£–¥–∞–ª–µ–Ω")


@router.callback_query(F.data == "cancel_delete")
async def cancel_delete_callback(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"""
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()


# ============ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ê–ú–ò ============

@router.callback_query(F.data == "admin_manage_admins")
async def manage_admins(callback: CallbackQuery, db: Database):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏"""
    if not is_super_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    admins = await db.get_all_admins()

    if not admins:
        text = "üëë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏</b>\n\n‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤."
    else:
        text = "üëë <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:</b>\n\n"
        for i, admin in enumerate(admins, 1):
            display_name = admin.get('username') and f"@{admin['username']}" or \
                          admin.get('first_name') or f"ID: {admin['user_id']}"
            text += f"{i}. {display_name} (ID: {admin['user_id']})\n"
            text += f"   ‚îî –î–æ–±–∞–≤–ª–µ–Ω: {admin.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"

    text += "\n\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
    text += "‚Ä¢ <code>/add_admin USER_ID</code> - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
    text += "‚Ä¢ <code>/remove_admin USER_ID</code> - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_stats")
            ]
        ]
    )

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.message(Command("add_admin"))
async def add_admin_command(message: Message, db: Database):
    """–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞)"""
    if not is_super_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()

    if len(args) < 2:
        await message.answer(
            "üëë <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "<code>/add_admin USER_ID</code>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/add_admin 123456789</code>\n\n"
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ /admin ‚Üí –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            parse_mode="HTML"
        )
        return

    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    user = await db.get_user_by_id(user_id)
    if not user:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω
    if user_id == SUPER_ADMIN_ID:
        await message.answer("‚ùå –°—É–ø–µ—Ä –∞–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∞–¥–º–∏–Ω!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∞–¥–º–∏–Ω
    if await db.is_admin(user_id):
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await db.add_admin(user_id, message.from_user.id)

    display_name = user.get('username') and f"@{user['username']}" or \
                  user.get('first_name') or f"ID: {user_id}"

    await message.answer(
        f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã!</b>\n\n"
        f"–ò–º—è: {display_name}\n"
        f"ID: {user_id}\n\n"
        f"–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.",
        parse_mode="HTML"
    )


@router.message(Command("remove_admin"))
async def remove_admin_command(message: Message, db: Database):
    """–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞)"""
    if not is_super_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()

    if len(args) < 2:
        await message.answer(
            "üëë <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "<code>/remove_admin USER_ID</code>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/remove_admin 123456789</code>",
            parse_mode="HTML"
        )
        return

    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω
    if user_id == SUPER_ADMIN_ID:
        await message.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
    if not await db.is_admin(user_id):
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
        return

    # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await db.remove_admin(user_id)

    user = await db.get_user_by_id(user_id)
    display_name = user.get('username') and f"@{user['username']}" or \
                  user.get('first_name') or f"ID: {user_id}" if user else f"ID: {user_id}"

    await message.answer(
        f"‚úÖ <b>–ê–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω!</b>\n\n"
        f"–ò–º—è: {display_name}\n"
        f"ID: {user_id}\n\n"
        f"–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
        parse_mode="HTML"
    )
