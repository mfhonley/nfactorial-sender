import asyncio
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.keyboards.main_kb import get_user_list_keyboard, get_cancel_keyboard, get_confirm_keyboard
from bot.database.db import Database
from bot.utils.permissions import can_send_messages

router = Router()


class MessageStates(StatesGroup):
    selecting_recipients = State()
    entering_message = State()
    confirming = State()


def get_reply_keyboard(sender_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–û—Ç–≤–µ—Ç–∏—Ç—å'"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å",
                    callback_data=f"reply_{sender_id}"
                )
            ]
        ]
    )
    return keyboard


@router.message(F.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def start_messaging(message: Message, state: FSMContext, db: Database):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
    if not await can_send_messages(message.from_user.id, db):
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
        )
        return

    users = await db.get_all_users(exclude_user_id=message.from_user.id)

    if not users:
        await message.answer(
            "‚ùå –í –±–æ—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
            "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start!"
        )
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data(selected_users=[])

    await message.answer(
        "üì§ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã.\n\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ'",
        reply_markup=get_user_list_keyboard(users),
        parse_mode="HTML"
    )
    await state.set_state(MessageStates.selecting_recipients)


@router.callback_query(MessageStates.selecting_recipients, F.data.startswith("toggle_user_"))
async def toggle_user(callback: CallbackQuery, state: FSMContext, db: Database):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    selected = data.get('selected_users', [])

    if user_id in selected:
        selected.remove(user_id)
        action = "—É–±—Ä–∞–Ω –∏–∑"
    else:
        selected.append(user_id)
        action = "–¥–æ–±–∞–≤–ª–µ–Ω –≤"

    await state.update_data(selected_users=selected)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    users = await db.get_all_users(exclude_user_id=callback.from_user.id)
    buttons = []

    for user in users:
        display_name = user.get('username') and f"@{user['username']}" or \
                      f"{user.get('first_name', '')} {user.get('last_name', '')}".strip() or \
                      f"ID: {user['user_id']}"

        checkbox = "‚òë" if user['user_id'] in selected else "‚òê"
        buttons.append([
            InlineKeyboardButton(
                text=f"{checkbox} {display_name}",
                callback_data=f"toggle_user_{user['user_id']}"
            )
        ])

    buttons.append([
        InlineKeyboardButton(text=f"‚úÖ –ì–æ—Ç–æ–≤–æ ({len(selected)} –≤—ã–±—Ä–∞–Ω–æ)", callback_data="done_selecting_users")
    ])
    buttons.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {action} —Å–ø–∏—Å–æ–∫")


@router.callback_query(MessageStates.selecting_recipients, F.data == "done_selecting_users")
async def done_selecting_users(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"""
    data = await state.get_data()
    selected = data.get('selected_users', [])

    if not selected:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", show_alert=True)
        return

    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {len(selected)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π\n\n"
        "2Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        "üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n"
        "‚Ä¢ –°—Å—ã–ª–∫–∏\n"
        "‚Ä¢ –≠–º–æ–¥–∑–∏",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(MessageStates.entering_message)
    await callback.answer()


@router.message(MessageStates.entering_message, F.text)
async def enter_message_text(message: Message, state: FSMContext, db: Database):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message_text = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    await state.update_data(message_text=message_text)

    data = await state.get_data()
    selected_count = len(data.get('selected_users', []))

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    sender_name = message.from_user.username and f"@{message.from_user.username}" or message.from_user.first_name

    preview = f"""
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üì® <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name}</b>

{message_text}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
<i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞</i>
    """

    await message.answer(
        "üìù <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n" + preview +
        f"\n\nüìä –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <b>{selected_count}</b> –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º.\n\n"
        "‚ùì –û—Ç–ø—Ä–∞–≤–∏—Ç—å?",
        reply_markup=get_confirm_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(MessageStates.confirming)


@router.callback_query(MessageStates.confirming, F.data == "confirm_yes")
async def confirm_send(callback: CallbackQuery, state: FSMContext, db: Database, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
    data = await state.get_data()
    selected_users = data.get('selected_users', [])
    message_text = data.get('message_text')

    await callback.message.edit_text(
        "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è...\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        parse_mode="HTML"
    )

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    sender = await db.get_user_by_id(callback.from_user.id)
    sender_name = sender.get('username') and f"@{sender['username']}" or sender.get('first_name')

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    formatted_message = f"""‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üì® <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name}</b>

{message_text}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
"""

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    broadcast_id = await db.add_broadcast(
        sender_id=callback.from_user.id,
        message_text=message_text,
        total_recipients=len(selected_users)
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    successful = 0
    failed = 0
    failed_users = []

    for user_id in selected_users:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å"
            await bot.send_message(
                chat_id=user_id,
                text=formatted_message,
                reply_markup=get_reply_keyboard(callback.from_user.id),
                parse_mode="HTML"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            await db.add_message(callback.from_user.id, user_id, message_text)
            successful += 1
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(0.5)
        except Exception as e:
            failed += 1
            user = await db.get_user_by_id(user_id)
            if user:
                display_name = user.get('username') and f"@{user['username']}" or \
                              user.get('first_name') or f"ID: {user_id}"
                failed_users.append(display_name)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await db.update_broadcast_stats(broadcast_id, successful, failed)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = f"""‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}
‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}
üìà –í—Å–µ–≥–æ: {len(selected_users)}
"""

    if failed_users:
        report += f"\n\n‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b>\n"
        for user in failed_users[:5]:
            report += f"‚Ä¢ {user}\n"
        if len(failed_users) > 5:
            report += f"... –∏ –µ—â–µ {len(failed_users) - 5}"

    await callback.message.edit_text(report, parse_mode="HTML")
    await state.clear()
    await callback.answer()


@router.callback_query(MessageStates.confirming, F.data == "confirm_no")
async def cancel_send(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É"""
    await callback.message.edit_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.answer()


@router.callback_query(F.data.startswith("reply_"))
async def start_reply(callback: CallbackQuery, state: FSMContext, db: Database):
    """–ù–∞—á–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
    if not await can_send_messages(callback.from_user.id, db):
        await callback.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.",
            show_alert=True
        )
        return

    sender_id = int(callback.data.split("_")[1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    sender = await db.get_user_by_id(sender_id)
    if not sender:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    sender_name = sender.get('username') and f"@{sender['username']}" or sender.get('first_name')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    await state.update_data(
        selected_users=[sender_id],
        reply_to=sender_name
    )

    await callback.message.answer(
        f"üí¨ <b>–û—Ç–≤–µ—Ç –¥–ª—è {sender_name}</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(MessageStates.entering_message)
    await callback.answer()


@router.callback_query(F.data == "cancel")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"""
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()
